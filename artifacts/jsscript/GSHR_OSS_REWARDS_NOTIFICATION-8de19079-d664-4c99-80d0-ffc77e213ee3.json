{
	"id": "8de19079-d664-4c99-80d0-ffc77e213ee3",
	"createdAt": "2022-08-01T21:46:15.530Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [
		{
			"id": "e97de24d-bb2f-4ffb-8a6a-53df30810cb6",
			"name": "json-rules-engine",
			"contextname": "jsonrulesengine",
			"path": "/app/tmp/node_modules/json-rules-engine"
		}
	],
	"entitySets": [],
	"apis": [],
	"name": "GSHR_OSS_REWARDS_NOTIFICATION",
	"ver": "22.8.10.143",
	"description": null,
	"content": [
		"==OBJECT STRING==",
		"async function rewards_notification() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        /*\r",
		"        code updated by vighnesh on august 10\r",
		"        */\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        const g_salOfferTxt = '\\n Salary Offered USD';\r",
		"        const g_maxTgtSalOfferTxt = '\\n Maximum Target Salary Offer';\r",
		"\r",
		"\r",
		"        //input parameters\r",
		"        let salOfferedUSD = req.body && req.body.salOfferedUSD ? req.body.salOfferedUSD : ''; //salary offered by user\r",
		"        let maxTgtSalOffer = req.body && req.body.maxTgtSalOffer ? req.body.maxTgtSalOffer : ''; //max target salary\r",
		"\r",
		"\r",
		"        const candidateObj = {\r",
		"            candidateName: req.body && req.body.candidateName ? req.body.candidateName : '',\r",
		"            hireType: req.body && req.body.hireType ? req.body.hireType : '',\r",
		"            yearsExp: req.body && req.body.yearsExp ? req.body.yearsExp : '',\r",
		"            country: req.body && req.body.country ? req.body.country : ''\r",
		"        }\r",
		"\r",
		"        const jobObj = {\r",
		"            jobTitle: req.body && req.body.jobTitle ? req.body.jobTitle : '',\r",
		"            region: req.body && req.body.region ? req.body.region : '',\r",
		"            jobPostCountry: req.body && req.body.jobPostCountry ? req.body.jobPostCountry : ''\r",
		"        }\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 0:\r",
		"        check if the above parameters are available\r",
		"        */\r",
		"        let errstatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        if (salOfferedUSD === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push(g_salOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (maxTgtSalOffer === '') {\r",
		"            errstatus = true;\r",
		"            errMsg.push(g_maxTgtSalOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (errstatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Please have the following missing information available: \\n' + errMsg.toString()\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 1:\r",
		"        what if the input paramters are not NUMBERS\r",
		"        */\r",
		"        let invalidStatus = false;\r",
		"        let invalidMsg = [];\r",
		"\r",
		"        if (isNaN(salOfferedUSD)) {\r",
		"            invalidStatus = true;\r",
		"            invalidMsg.push(g_salOfferTxt);\r",
		"        }\r",
		"\r",
		"        if (isNaN(maxTgtSalOffer)) {\r",
		"            invalidStatus = true;\r",
		"            invalidMsg.push(g_maxTgtSalOfferTxt);\r",
		"        }\r",
		"\r",
		"\r",
		"        if (invalidStatus && invalidMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Please have the following invalid parameter amended: \\n' + invalidMsg.toString()\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 2: ALL GOOD TO proceed with the difference in salary calulation\r",
		"        SALARY DIFFERENCE: ((SAL OFFER - MAX TGT SAL OFFER) / MAX TGT SAL OFFER ) * 100\r",
		"        */\r",
		"\r",
		"        let diffSalPercent = ((salOfferedUSD - maxTgtSalOffer) / maxTgtSalOffer) * 100;\r",
		"        diffSalPercent = Number(Number(diffSalPercent).toPrecision(4));\r",
		"\r",
		"        let jsonObj = {\r",
		"            \"name\": \"GSHR_GSTR_NOTIFICATION\",\r",
		"            \"attributes\": [\r",
		"                {\r",
		"                    \"name\": \"salaryDiffPercentValue\",\r",
		"                    \"type\": \"number\"\r",
		"                }\r",
		"            ],\r",
		"            \"decisions\": [\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"salaryDiffPercentValue\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": 12\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"EQUAL_GSTR\",\r",
		"                        \"params\": {\r",
		"                            \"doNotifyGSTR\": \"false\",\r",
		"                            \"thresholdValue\": \"12\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"salaryDiffPercentValue\",\r",
		"                                \"operator\": \"lessThan\",\r",
		"                                \"value\": 12\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"LESS_THAN_GSTR\",\r",
		"                        \"params\": {\r",
		"                            \"doNotifyGSTR\": \"false\",\r",
		"                            \"thresholdValue\": \"12\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"salaryDiffPercentValue\",\r",
		"                                \"operator\": \"greaterThan\",\r",
		"                                \"value\": 12\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"GREATER_THAN_GSTR\",\r",
		"                        \"params\": {\r",
		"                            \"doNotifyGSTR\": \"true\",\r",
		"                            \"thresholdValue\": \"12\"\r",
		"                        }\r",
		"                    }\r",
		"                }\r",
		"\r",
		"            ]\r",
		"        };\r",
		"\r",
		"\r",
		"        /*\r",
		"        creating a variable Engine that will be used as a constructor\r",
		"        */\r",
		"        const Engine = modules.jsonrulesengine.Engine;\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 1: computing the response from the RULE ENGINE\r",
		"        */\r",
		"        //function to return the o/p values based on the inputs\r",
		"        function processEngine(inputs, decisions) {\r",
		"\r",
		"            //intialize a new engine\r",
		"            const engine = new Engine(decisions);\r",
		"\r",
		"            //passing the input to the above engine & mathcing up with the decisions\r",
		"            return engine.run(inputs)\r",
		"                .then(results => {\r",
		"                    return results.events\r",
		"                })\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"        const res = await processEngine({ salaryDiffPercentValue: diffSalPercent }, jsonObj.decisions);\r",
		"\r",
		"\r",
		"        /*\r",
		"        To-Do: what if there is more than 1 elements in the array response\r",
		"        Can that condition trigger based on the rule engine process and inputs? -- see to it later\r",
		"        */\r",
		"        if (Array.isArray(res) && res.length === 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `<insert message here>`\r",
		"            }\r",
		"\r",
		"            log.info(`[GSHR_OSS_REWARDS_NOTIFICATION] invalid response  of ${res.length} received.`)\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"        let item = res[res.length - 1];\r",
		"\r",
		"\r",
		"        if (item && item.params) {\r",
		"\r",
		"            /*\r",
		"            defined rule available\r",
		"            */\r",
		"            switch (item.params.doNotifyGSTR) {\r",
		"\r",
		"                case true:\r",
		"                    /*\r",
		"                    SEND NOTIFICATION TO GSTR DEPARTMENT\r",
		"                    */\r",
		"                    let toUserEmail = 'vsawan10@its.jnj.com';\r",
		"                    let subject = 'GSHR ACTION -- Approval required on Submitted Offer';\r",
		"                    let mailBody = \"<div>Dear GSTR DEPARTMENT USER,</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>A Submitted offer has been assigned to you for your approvals</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>CANDIDATE DETAILS:</b></div>\" +\r",
		"                        \"<div><b>Candidate Name: </b>\" + candidateObj.candidateName + \"</div>\" +\r",
		"                        \"<div><b>Hire Type: </b>\" + candidateObj.hireType + \"</div>\" +\r",
		"                        \"<div><b>Years of Experience: </b>\" + candidateObj.yearsExp + \"</div>\" +\r",
		"                        \"<div><b>Country from: </b>\" + candidateObj.country + \"</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>JOB DETAILS:</b></div>\" +\r",
		"                        \"<div><b>Title: </b>\" + jobObj.jobTitle + \"</div>\" +\r",
		"                        \"<div><b>Region: </b>\" + jobObj.region + \"</div>\" +\r",
		"                        \"<div><b>Country: </b>\" + jobObj.jobPostCountry + \"</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>This Offer was sent for your approvals since the Salary offered is \" +\r",
		"                        diffSalPercent + \"% \" +\r",
		"                        \"greater than the Maximum target Salary Offer which surpasses the threshold of \" + notificationRes.thresholdValue + \"%</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div>Thank you,</div>\" +\r",
		"                        \"<div>GSHR SYSTEM</div>\" +\r",
		"                        \"<div><br></div>\" +\r",
		"                        \"<div><b>Note: Please do not respond to this email. This is a system generated email.</b></div>\";\r",
		"\r",
		"                    await sendEmail(toUserEmail, subject, mailBody, \"GSHR-System-Admin-DoNotReply@its.jnj.com\");\r",
		"\r",
		"                    log.info('[GSHR_OSS_REWARDS_NOTIFICATION] email sent to -- ' + toUserEmail);\r",
		"\r",
		"                    result = {\r",
		"                        message: 'Offer process completed. \\nEmail Notification has been sent to ' + toUserEmail + ' from the Rewards DEPARTMENT'\r",
		"                    }\r",
		"                    break;\r",
		"\r",
		"                case false:\r",
		"                    /*\r",
		"                    DONT SEND ANY NOTIFICATION\r",
		"                    */\r",
		"                    result = {\r",
		"                        message: 'Offer Process Completed.'\r",
		"                    }\r",
		"                    break;\r",
		"\r",
		"            }\r",
		"\r",
		"            result.statusFlag = 'S';\r",
		"            result.type = 'REWARDS_NOTIFICATION';\r",
		"            result.diffSalPercent = diffSalPercent;\r",
		"            result.queryMsg = 'operation completed in ' + ((Date.now() - startTime) / 1000) + ' seconds';\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"\r",
		"        complete();\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: `System was unable to process the request due to ${err}`\r",
		"        }\r",
		"\r",
		"        log.error(`[GSHR_OSS_REWARDS_NOTIFICATION] script execution failed due to -- ${err}`);\r",
		"        complete();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"rewards_notification();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "5d1f1d76-58c4-435d-8ca3-67cdbfb841f9",
	"package": "fe88e924-8026-406a-ab72-68f20486b107"
}