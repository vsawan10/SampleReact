{
	"id": "c0d1bba7-1476-4f7c-a46a-43943afe0b29",
	"createdAt": "2022-08-01T20:11:06.677Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [
		{
			"id": "e97de24d-bb2f-4ffb-8a6a-53df30810cb6",
			"name": "json-rules-engine",
			"contextname": "jsonrulesengine",
			"path": "/app/tmp/node_modules/json-rules-engine"
		}
	],
	"entitySets": [],
	"apis": [],
	"name": "GSHR_OSS_CURRENCY_CONVERSION",
	"ver": "22.8.2.1311",
	"description": "script for currency conversion",
	"content": [
		"==OBJECT STRING==",
		"async function fetch_USD_Equivalent() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        //input parameters\r",
		"        let countryName = req.body && req.body.country ? req.body.country : '';\r",
		"        let tgtSalOffer = req.body && req.body.tgtSalOffer ? req.body.tgtSalOffer : \"\";\r",
		"\r",
		"        /*\r",
		"        validating the parameters\r",
		"        */\r",
		"        let errStatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        if (countryName.trim() === '') {\r",
		"            errStatus = true;\r",
		"            errMsg.push(`\\n Country`);\r",
		"        }\r",
		"\r",
		"        if (tgtSalOffer.trim() === '') {\r",
		"            errStatus = true;\r",
		"            errMsg.push(`\\n Target Salary Offer`);\r",
		"        }\r",
		"\r",
		"        if (errStatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `Please provide with the following mandatory information: ${errMsg.toString()}`\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"        }\r",
		"\r",
		"\r",
		"        /*\r",
		"        if the target salary offer is not a number\r",
		"        */\r",
		"        if (isNaN(tgtSalOffer)) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'Invalid Target Salary Offer received'\r",
		"            }\r",
		"\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"        //module incorporation\r",
		"        const Engine = modules.jsonrulesengine.Engine;\r",
		"\r",
		"\r",
		"        let jsonObj = {\r",
		"            \"name\": \"GSHR_CURRENCY_CONVERSION\",\r",
		"            \"attributes\": [\r",
		"                {\r",
		"                    \"name\": \"country\",\r",
		"                    \"type\": \"string\"\r",
		"                }\r",
		"            ],\r",
		"            \"decisions\": [\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"country\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"CANADA\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"forexRate\",\r",
		"                        \"params\": {\r",
		"                            \"conversionRate\": \"0.77\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"country\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"BRAZIL\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"forexRate\",\r",
		"                        \"params\": {\r",
		"                            \"conversionRate\": \"0.18\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"country\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"INDIA\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"forexRate\",\r",
		"                        \"params\": {\r",
		"                            \"conversionRate\": \"0.013\"\r",
		"                        }\r",
		"                    }\r",
		"                }\r",
		"            ]\r",
		"        };\r",
		"\r",
		"\r",
		"        //function to return the o/p values based on the inputs\r",
		"        function processEngine(inputs, decisions) {\r",
		"\r",
		"            //intialize a new engine\r",
		"            const engine = new Engine(decisions);\r",
		"\r",
		"            //passing the input to the above engine & mathcing up with the decisions\r",
		"            return engine.run(inputs)\r",
		"                .then(results => {\r",
		"                    //console.log(results.events)\r",
		"                    return results.events\r",
		"                })\r",
		"\r",
		"        }\r",
		"\r",
		"        /*\r",
		"        testing with inputs\r",
		"        inputs coming from API request body\r",
		"        */\r",
		"        let res = [];\r",
		"        res = await processEngine({ country: countryName }, jsonObj.decisions);\r",
		"\r",
		"\r",
		"\r",
		"        if (Array.isArray(res) && res.length === 0 && res[res.length - 1].params.conversionRate) {\r",
		"\r",
		"            log.info(`[GSHR_OSS_CURRENCY_CONVERSION] script execution -- forex rate fetched -- ${res.length}`)\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `System unable to fetch the forex conversion`\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        STEP 2: CONVERTING THE TARGET SALARY OFFER IN LOCAL CURRENCY TO USD EQ.\r",
		"        FORMULA: multplying the local currency by forex Rate.\r",
		"        */\r",
		"        let usd_equivalent_offer = 0;\r",
		"        usd_equivalent_offer = tgtSalOffer * res[res.length - 1].params.conversionRate;\r",
		"\r",
		"\r",
		"        if (isNaN(usd_equivalent_offer)) {\r",
		"\r",
		"            /*\r",
		"            INVALID USD EQUIVALENT\r",
		"            */\r",
		"            result = {\r",
		"\r",
		"                statusFlag: 'F',\r",
		"                message: 'Invalid USD equivalent received. \\n Please check the Target Salary offer, country or Rule'\r",
		"\r",
		"            }\r",
		"            log.error('[GSHR_OSS_CURRENCY_CONVERSION] script execution failed due to invalid USD EQ calculated');\r",
		"\r",
		"        } else {\r",
		"\r",
		"            /*\r",
		"            VALID USD EQUIVALENT\r",
		"            */\r",
		"            result = {\r",
		"\r",
		"                statusFlag: 'S',\r",
		"                type: res[res.length - 1].type,\r",
		"                usd_equivalent: usd_equivalent_offer,\r",
		"                queryMsg: 'operation completed in ' + ((Date.now() - startTime) / 1000) + ' seconds'\r",
		"\r",
		"            }\r",
		"\r",
		"            log.info('[GSHR_OSS_CURRENCY_CONVERSION] script executed with USD EQ of ' + usd_equivalent_offer + ' against local currency of ' + countryName);\r",
		"        }\r",
		"\r",
		"\r",
		"        // console.log(res)\r",
		"        // console.log(usd_equivalent_offer)\r",
		"        complete();\r",
		"\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        log.error(`[GSHR_OSS_CURRENCY_CONVERSION] script execution failed due to ${err}`);\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: `execution failed due to -- ${err}`\r",
		"        }\r",
		"        complete();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"fetch_USD_Equivalent();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "5d1f1d76-58c4-435d-8ca3-67cdbfb841f9",
	"package": "fe88e924-8026-406a-ab72-68f20486b107"
}