{
	"id": "3f7b7b29-d2be-413a-8db1-a70fb654bd0f",
	"createdAt": "2022-07-28T18:09:28.488Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [
		{
			"id": "e97de24d-bb2f-4ffb-8a6a-53df30810cb6",
			"name": "json-rules-engine",
			"contextname": "jsonrulesengine",
			"path": "/app/tmp/node_modules/json-rules-engine"
		}
	],
	"entitySets": [],
	"apis": [],
	"name": "GSHR_OSS_GET_REGIONBASED_COUNTRIES",
	"ver": "22.8.2.1012",
	"description": "sample script for OSS--fetching region based countries",
	"content": [
		"==OBJECT STRING==",
		"async function fetchRgionBasedcountries() {\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        let errStatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        //input parameters\r",
		"        let region = req.body && req.body.region ? req.body.region : '';\r",
		"\r",
		"        //input validation\r",
		"        if (region.trim() === '') {\r",
		"            errStatus = true;\r",
		"            errMsg.push('/n Region');\r",
		"        }\r",
		"\r",
		"        if (errStatus && errMsg.length > 0) {\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `Please have the below mandatory information: ${errMsg.toString()}`\r",
		"            }\r",
		"            complete();\r",
		"            return\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        //Rule engine code\r",
		"        /*\r",
		"        creating a variable Engine that will be used as a constructor\r",
		"        */\r",
		"        const Engine = modules.jsonrulesengine.Engine;\r",
		"\r",
		"        const jsonObj = {\r",
		"            \"name\": \"GSHR_GET_AVAILABLE_COUNTRIES_BASED ON REGION\",\r",
		"            \"attributes\": [\r",
		"                {\r",
		"                    \"name\": \"region\",\r",
		"                    \"type\": \"string\"\r",
		"                }\r",
		"            ],\r",
		"            \"decisions\": [\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"region\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"NA\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"REGION_COUNTRIES\",\r",
		"                        \"params\": {\r",
		"                            \"countryNames\": \"United States of America,Canada\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"region\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"EMEA\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"REGION_COUNTRIES\",\r",
		"                        \"params\": {\r",
		"                            \"countryNames\": \"Afghanistan,France\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"region\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"LATAM\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"REGION_COUNTRIES\",\r",
		"                        \"params\": {\r",
		"                            \"countryNames\": \"Colombia\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"region\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"ASPAC\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"REGION_COUNTRIES\",\r",
		"                        \"params\": {\r",
		"                            \"countryNames\": \"Australia\"\r",
		"                        }\r",
		"                    }\r",
		"                }\r",
		"            ]\r",
		"        }\r",
		"\r",
		"        //function to return the o/p values based on the inputs\r",
		"        function processEngine(inputs, decisions) {\r",
		"\r",
		"            //intialize a new engine\r",
		"            const engine = new Engine(decisions);\r",
		"\r",
		"            //passing the input to the above engine & mathcing up with the decisions\r",
		"            return engine.run(inputs)\r",
		"                .then(results => {\r",
		"                    //console.log(results.events)\r",
		"                    return results.events\r",
		"                })\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        testing with inputs\r",
		"        inputs coming from API request body\r",
		"        */\r",
		"        const res = await processEngine({ region: region }, jsonObj.decisions);\r",
		"\r",
		"\r",
		"\r",
		"        if (Array.isArray(res) && res.length === 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `<insert message here>`\r",
		"            }\r",
		"\r",
		"            log.info(`[GSHR_OSS_GET_REGIONBASED_COUNTRIES] script execution -- countries fetched -- ${res.length}`)\r",
		"            complete();\r",
		"            return;\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'S',\r",
		"            dataResponse: res,\r",
		"            type: res[res.length - 1].type,\r",
		"            queryMsg: `execution completed in ${(Date.now() - startTime) / 1000} seconds.`\r",
		"        }\r",
		"\r",
		"        log.info(`[GSHR_OSS_GET_REGIONBASED_COUNTRIES] script execution -- countries fetched -- ${JSON.stringify(res)}`)\r",
		"        complete();\r",
		"\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: `system was unable to fetch the region based countries due to -- ${err}.`\r",
		"        }\r",
		"        log.error(`[GSHR_OSS_GET_REGIONBASED_COUNTRIES] script execution failed due to ${err}`)\r",
		"        complete();\r",
		"\r",
		"\r",
		"    }\r",
		"}\r",
		"\r",
		"fetchRgionBasedcountries();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "5d1f1d76-58c4-435d-8ca3-67cdbfb841f9",
	"package": "fe88e924-8026-406a-ab72-68f20486b107"
}