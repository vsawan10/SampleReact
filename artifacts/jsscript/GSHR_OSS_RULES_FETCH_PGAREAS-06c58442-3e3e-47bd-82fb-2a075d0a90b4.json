{
	"id": "06c58442-3e3e-47bd-82fb-2a075d0a90b4",
	"createdAt": "2022-07-27T18:40:14.065Z",
	"createdBy": "VSawan10",
	"globalScripts": [],
	"externalModules": [
		{
			"id": "e97de24d-bb2f-4ffb-8a6a-53df30810cb6",
			"name": "json-rules-engine",
			"contextname": "jsonrulesengine",
			"path": "/app/tmp/node_modules/json-rules-engine"
		}
	],
	"entitySets": [],
	"apis": [],
	"name": "GSHR_OSS_RULES_FETCH_PGAREAS",
	"ver": "22.8.2.1014",
	"description": "sample HRIA script for PGAREAS",
	"content": [
		"==OBJECT STRING==",
		"async function fetch_PGAREA() {\r",
		"\r",
		"    try {\r",
		"\r",
		"        let startTime = Date.now();\r",
		"\r",
		"        let errStatus = false;\r",
		"        let errMsg = [];\r",
		"\r",
		"        /*\r",
		"        Input Parameters\r",
		"        */\r",
		"        let countryName = req.body && req.body.country ? req.body.country : '';\r",
		"\r",
		"\r",
		"        //validating the input parameters \r",
		"        if (countryName === undefined || countryName.trim() === '') {\r",
		"            errStatus = true;\r",
		"            errMsg.push('/n Country');\r",
		"        }\r",
		"\r",
		"\r",
		"        /*\r",
		"        complete the execution with 200--F\r",
		"        */\r",
		"        if (errStatus && errMsg.length > 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: `Please have the below mandatory information: ${errMsg.toString()}`\r",
		"            }\r",
		"            complete();\r",
		"            return;\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"        //module incorporation\r",
		"        const Engine = modules.jsonrulesengine.Engine;\r",
		"\r",
		"        /*\r",
		"        TECH NOTE: JSON object hardcoded for now, later now need to find a way to save it and bring from the UI as the rules\r",
		"        sample Rules file\r",
		"        generated from the OSS -- json rule editor\r",
		"        */\r",
		"        let jsonObj = {\r",
		"            \"name\": \"GSHR_FETCH_PGAREA\",\r",
		"            \"attributes\": [\r",
		"                {\r",
		"                    \"name\": \"country\",\r",
		"                    \"type\": \"string\"\r",
		"                }\r",
		"            ],\r",
		"            \"decisions\": [\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"country\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"CANADA\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"PG_AREAS\",\r",
		"                        \"params\": {\r",
		"                            \"pgAreas\": \"Alberta,New Brunswick,Toronto\"\r",
		"                        }\r",
		"                    }\r",
		"                },\r",
		"                {\r",
		"                    \"conditions\": {\r",
		"                        \"all\": [\r",
		"                            {\r",
		"                                \"fact\": \"country\",\r",
		"                                \"operator\": \"equal\",\r",
		"                                \"value\": \"Brazil\"\r",
		"                            }\r",
		"                        ]\r",
		"                    },\r",
		"                    \"event\": {\r",
		"                        \"type\": \"PG_AREAS\",\r",
		"                        \"params\": {\r",
		"                            \"pgAreas\": \"Rio Claro,Sao Jose,Nova Hartz\"\r",
		"                        }\r",
		"                    }\r",
		"                }\r",
		"            ]\r",
		"        };\r",
		"\r",
		"\r",
		"        //function to return the o/p values based on the inputs\r",
		"        function processEngine(inputs, decisions) {\r",
		"\r",
		"            //intialize a new engine\r",
		"            const engine = new Engine(decisions);\r",
		"\r",
		"            //passing the input to the above engine & mathcing up with the decisions\r",
		"            return engine.run(inputs)\r",
		"                .then(results => {\r",
		"                    //console.log(results.events)\r",
		"                    return results.events\r",
		"                })\r",
		"\r",
		"        }\r",
		"\r",
		"\r",
		"\r",
		"\r",
		"        /*\r",
		"        testing with inputs\r",
		"        inputs coming from API request body\r",
		"        */\r",
		"        const res = await processEngine({ country: countryName }, jsonObj.decisions);\r",
		"\r",
		"\r",
		"        //what if there is no PG area fetched and array is empty\r",
		"        if (Array.isArray(res) && res.length === 0) {\r",
		"\r",
		"            result = {\r",
		"                statusFlag: 'F',\r",
		"                message: 'appropriate error Message here'\r",
		"            }\r",
		"            log.info(`[GSHR_OSS_RULES_FETCH_PGAREAS] script execution -- PG Areas fetched -- ${res.length}`)\r",
		"            complete();\r",
		"            return;\r",
		"        }\r",
		"\r",
		"\r",
		"        // PG AREAS are fetched\r",
		"        result = {\r",
		"            statusFlag: 'S',\r",
		"            type: res[res.length - 1].type,\r",
		"            dataResponse: res,\r",
		"            queryMsg: `Execution completed in ${(Date.now() - startTime) / 1000}  seconds`\r",
		"        }\r",
		"\r",
		"        //console.log(JSON.stringify(result))\r",
		"\r",
		"        log.info(`[GSHR_OSS_RULES_FETCH_PGAREAS] script execution -- PG Areas fetched -- ${JSON.stringify(res)}`)\r",
		"        complete();\r",
		"\r",
		"\r",
		"\r",
		"\r",
		"    } catch (err) {\r",
		"\r",
		"        log.error(`[GSHR_OSS_RULES_FETCH_PGAREAS] script execution failed due to ${err}`);\r",
		"\r",
		"        result = {\r",
		"            statusFlag: 'F',\r",
		"            message: `execution failed due to -- ${err}`\r",
		"        }\r",
		"        complete();\r",
		"\r",
		"    }\r",
		"\r",
		"}\r",
		"\r",
		"fetch_PGAREA();"
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": true,
	"jsscriptGroup": "5d1f1d76-58c4-435d-8ca3-67cdbfb841f9",
	"package": "fe88e924-8026-406a-ab72-68f20486b107"
}